<style>
    .dashboard-card {
        background-color: #fff;
        border-radius: 1rem;
        padding: 1.5rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        margin-bottom: 1.5rem;
    }
    .progress-container .progress {
        height: 10px;
    }
    
    /* Mobile responsive styles */
    @media (max-width: 768px) {
        .dashboard-card {
            padding: 1rem;
            margin-bottom: 1rem;
        }
        
        .dashboard-card h5 {
            font-size: 1.1rem;
        }
        
        .dashboard-card canvas {
            max-height: 250px !important;
        }
        
        .welcome-title {
            font-size: 1.8rem !important;
        }
    }
    
    @media (max-width: 576px) {
        .dashboard-card {
            padding: 0.75rem;
        }
        
        .dashboard-card h5 {
            font-size: 1rem;
        }
        
        .dashboard-card canvas {
            max-height: 200px !important;
        }
        
        .welcome-title {
            font-size: 1.5rem !important;
        }
    }
</style>

<div class="row">
    <div class="col-12">
        <h1 class="welcome-title" style="font-weight: 800; font-size: 2.5rem; color: #4F46E5; margin-bottom: 1rem;">Welcome, <%= user.name %></h1>
    </div>
</div>

<!-- Row 1: Income vs. Expense Trend -->
<div class="row">
    <div class="col-12">
        <div class="dashboard-card">
            <h5 class="mb-3">Income vs. Expense Trend (Last 2 Months)</h5>
            <div style="position: relative; height: 340px;">
                <canvas id="incomeExpenseTrendChart"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- Row 2: Breakdowns -->
<div class="row mt-4">
    <!-- Monthly Expense Breakdown -->
    <div class="col-12 col-lg-6 mb-3">
        <div class="dashboard-card">
            <h5 class="mb-3">Monthly Expense Breakdown</h5>
            <div style="position: relative; height: 340px;">
                <canvas id="expenseBreakdownChart"></canvas>
            </div>
        </div>
    </div>
    <!-- Income Source Breakdown -->
    <div class="col-12 col-lg-6 mb-3">
        <div class="dashboard-card">
            <h5 class="mb-3">Income Source Breakdown</h5>
            <div style="position: relative; height: 340px;">
                <canvas id="incomeBreakdownChart"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- Row 3: Budget vs Spending -->
<div class="row mt-4">
    <div class="col-12">
        <div class="dashboard-card">
            <h5 class="mb-3">Budget vs. Spending Analysis</h5>
            <div style="position: relative; height: 340px;">
                <canvas id="budgetSpendingChart"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- Row 4: Recent Transactions & Recurring Breakdown -->
<div class="row mt-4">
    <!-- Recent Transactions -->
    <div class="col-12 col-lg-6 mb-3">
        <div class="dashboard-card h-100">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5>Recent Transactions</h5>
                <a href="/transactions" class="btn btn-sm btn-outline-primary">View All</a>
            </div>
            <ul class="list-group list-group-flush">
                <% if (transactions.length > 0) { %>
                    <% transactions.slice(0, 5).forEach(function(transaction) { %>
                        <li class="list-group-item d-flex justify-content-between align-items-center px-0">
                            <div>
                                <p class="mb-0 fw-bold"><%= transaction.category %></p>
                                <small class="text-muted"><%= new Date(transaction.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) %></small>
                            </div>
                            <span class="fw-bold <%= transaction.type === 'income' ? 'text-success' : 'text-danger' %>">
                                <%= transaction.type === 'income' ? '+' : '-' %> Rs <%= formatNepaliCurrency(transaction.amount) %>
                            </span>
                        </li>
                    <% }); %>
                <% } else { %>
                    <p class="text-center text-muted">No recent transactions.</p>
                <% } %>
            </ul>
        </div>
    </div>
    <!-- Recurring Transactions Breakdown -->
    <div class="col-12 col-lg-6 mb-3">
        <div class="dashboard-card h-100">
            <h5 class="mb-3">Recurring Transactions Breakdown</h5>
            <div style="position: relative; height: 340px;">
                <canvas id="recurringTransactionsChart"></canvas>
            </div>
        </div>
    </div>
</div>


<script>
document.addEventListener('DOMContentLoaded', function () {
    if (typeof Chart === 'undefined') {
        console.error('Chart.js is not loaded.');
        return;
    }
    if (typeof formatNepaliCurrency === 'undefined') {
        window.formatNepaliCurrency = function(num) { return 'Rs' + (num ? num.toFixed(2) : '0.00'); };
    }

    const expenseDataJSON = `<%- JSON.stringify(budgetUsage) %>`;
    try {
        const expenseData = JSON.parse(expenseDataJSON);
        const labels = Object.keys(expenseData);
        const data = Object.values(expenseData).map(d => d.spent);

        const expenseCtx = document.getElementById('expenseBreakdownChart');
        if (expenseCtx && labels.length > 0) {
            new Chart(expenseCtx.getContext('2d'), {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Expenses',
                        data: data,
                        backgroundColor: [
                            '#4F46E5', '#818CF8', '#A78BFA', '#F87171', '#FBBF24', '#34D399', '#FB923C', '#F472B6', '#60A5FA', '#A3E635', '#2DD4BF', '#C084FC'
                        ],
                        borderColor: '#fff',
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed !== null) {
                                        label += formatNepaliCurrency(context.parsed);
                                    }
                                    return label;
                                }
                            }
                        }
                    }
                }
            });
        } else if (expenseCtx) {
            const parent = expenseCtx.parentElement;
            parent.innerHTML = '<div class="text-center text-muted d-flex align-items-center justify-content-center h-100"><p>No expense data for this month.</p></div>';
        }
    } catch (e) {
        console.error('Failed to parse expense data:', e);
        const expenseCtx = document.getElementById('expenseBreakdownChart');
        if (expenseCtx) {
            const parent = expenseCtx.parentElement;
            parent.innerHTML = '<div class="text-center text-muted d-flex align-items-center justify-content-center h-100"><p>Could not load chart data.</p></div>';
        }
    }

    // Income vs Expense Trend Chart
    const trendData = <%- JSON.stringify(trendData) %>;
    const trendCtx = document.getElementById('incomeExpenseTrendChart');
    if (trendCtx) {
      new Chart(trendCtx.getContext('2d'), {
        type: 'line',
        data: {
          labels: trendData.labels,
          datasets: [
            {
              label: 'Income',
              data: trendData.income,
              borderColor: 'rgba(75, 192, 192, 1)',
              backgroundColor: 'rgba(75, 192, 192, 0.2)',
              fill: true,
              tension: 0.4
            },
            {
              label: 'Expense',
              data: trendData.expense,
              borderColor: 'rgba(255, 99, 132, 1)',
              backgroundColor: 'rgba(255, 99, 132, 0.2)',
              fill: true,
              tension: 0.4
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                callback: function(value) {
                  return formatNepaliCurrency(value);
                }
              }
            }
          },
          plugins: {
            tooltip: {
              callbacks: {
                label: function(context) {
                  let label = context.dataset.label || '';
                  if (label) {
                    label += ': ';
                  }
                  if (context.parsed.y !== null) {
                    label += formatNepaliCurrency(context.parsed.y);
                  }
                  return label;
                }
              }
            }
          }
        }
      });
    }

    // Budget vs Spending Chart
    const budgetSpendingCtx = document.getElementById('budgetSpendingChart');
    const budgetUsageData = <%- JSON.stringify(budgetUsage) %>;

    if (budgetSpendingCtx && Object.keys(budgetUsageData).length > 0) {
      const budgetLabels = Object.keys(budgetUsageData);
      const budgetData = Object.values(budgetUsageData).map(d => d.budget);
      const spentData = Object.values(budgetUsageData).map(d => d.spent);

      new Chart(budgetSpendingCtx.getContext('2d'), {
        type: 'bar',
        data: {
          labels: budgetLabels,
          datasets: [
            {
              label: 'Budget',
              data: budgetData,
              backgroundColor: 'rgba(54, 162, 235, 0.5)',
              borderColor: 'rgba(54, 162, 235, 1)',
              borderWidth: 1
            },
            {
              label: 'Spent',
              data: spentData,
              backgroundColor: 'rgba(255, 99, 132, 0.5)',
              borderColor: 'rgba(255, 99, 132, 1)',
              borderWidth: 1
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                callback: function(value) {
                  return formatNepaliCurrency(value);
                }
              }
            }
          },
          plugins: {
            tooltip: {
              callbacks: {
                label: function(context) {
                  let label = context.dataset.label || '';
                  if (label) {
                    label += ': ';
                  }
                  if (context.parsed.y !== null) {
                    label += formatNepaliCurrency(context.parsed.y);
                  }
                  return label;
                }
              }
            }
          }
        }
      });
    }

    // Recurring Transactions Chart
    const recurringData = <%- JSON.stringify(recurringByCategory) %>;
    const recurringCtx = document.getElementById('recurringTransactionsChart');
    if (recurringCtx && Object.keys(recurringData).length > 0) {
        const recurringLabels = Object.keys(recurringData);
        const recurringValues = Object.values(recurringData);

        new Chart(recurringCtx.getContext('2d'), {
            type: 'doughnut',
            data: {
                labels: recurringLabels,
                datasets: [{
                    label: 'Recurring Transactions',
                    data: recurringValues,
                    backgroundColor: [
                        '#FF6384',
                        '#36A2EB',
                        '#FFCE56',
                        '#4BC0C0',
                        '#9966FF',
                        '#FF9F40'
                    ],
                    borderColor: '#fff',
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom',
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                let label = context.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                if (context.parsed !== null) {
                                    label += formatNepaliCurrency(context.parsed);
                                }
                                return label;
                            }
                        }
                    }
                }
            }
        });
    } else if (recurringCtx) {
        const parent = recurringCtx.parentElement;
        parent.innerHTML = '<div class="text-center text-muted d-flex align-items-center justify-content-center h-100"><p>No recurring transactions found.</p></div>';
    }

    // Income Source Breakdown Chart
    const incomeData = <%- JSON.stringify(incomeByCategory) %>;
    const incomeCtx = document.getElementById('incomeBreakdownChart');
    if (incomeCtx && Object.keys(incomeData).length > 0) {
      const incomeLabels = Object.keys(incomeData);
      const incomeValues = Object.values(incomeData);

      if (incomeLabels.length > 0) {
        new Chart(incomeCtx.getContext('2d'), {
          type: 'doughnut',
          data: {
            labels: incomeLabels,
            datasets: [{
              label: 'Income',
              data: incomeValues,
              backgroundColor: [
                '#1cc88a',
                '#36b9cc',
                '#4e73df',
                '#f6c23e',
                '#e74a3b',
                '#858796'
              ],
              borderColor: '#fff',
              borderWidth: 2
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                position: 'bottom',
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    let label = context.label || '';
                    if (label) {
                      label += ': ';
                    }
                    if (context.parsed !== null) {
                      label += formatNepaliCurrency(context.parsed);
                    }
                    return label;
                  }
                }
              }
            }
          }
        });
      } else {
        const parent = incomeCtx.parentElement;
        parent.innerHTML = '<div class="text-center text-muted d-flex align-items-center justify-content-center h-100"><p>No income data for this month.</p></div>';
      }
    }
});
</script>


